

module MyLib {
    import util::my_fn as x;

    module Types2 {
        struct Uniforms {
            modelMatrix: array<mat4x4f, 5>
        }

        struct Camera {
            viewProjectionMatrix: mat4x4f
        }

        const x: Camera = Camera();
    }

    @binding(0) @group(0)
    var<uniform> uniforms: Types2::Uniforms;

    @binding(1) @group(0)
    var<uniform> camera: Camera;

    @vertex
    fn main2(@builtin(instance_index) instanceIdx: u32, @location(0) position: vec4f, @location(1) color: vec4f) -> VertexOutput {
        import Types2::{ Uniforms, x as y }
        let uni = Uniforms();
        var output: VertexOutput;
        output.Position = camera.viewProjectionMatrix * uniforms.modelMatrix[instanceIdx] * position;
        output.fragColor = color / vec4<f32>(y);
        return output;
    }

    struct Uniforms {
        modelMatrix: array<mat4x4f, 5>
    }

    struct Camera {
        viewProjectionMatrix: mat4x4f
    }

    @fragment
    fn util_main() -> u32 {
        return x();
    }

    module util {
        fn my_fn() -> u32 {
            return 42;
        }
    }

    struct VertexOutput {
        @builtin(position)
        Position: vec4f,
        @location(0)
        fragColor: vec4f
    }

    @vertex
    fn main(@builtin(instance_index) instanceIdx: u32, @location(0) position: vec4f, @location(1) color: vec4f) -> VertexOutput {
        var output: VertexOutput;
        output.Position = camera.viewProjectionMatrix * uniforms.modelMatrix[instanceIdx] * position;
        output.fragColor = color;
        return output;
    }
}
