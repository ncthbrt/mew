extend My_Lib<Hey, WhatsUp>::VertexShader<Hi>;

module Hey {
    alias T = vec4f;
}

module Hi {
    alias T = Camera<mat4x4f>;
}

struct Camera<Mat> {
    viewProjectionMatrix: Mat
}

module WhatsUp {
    alias T = f32;
}

module My_Lib<A, B, C = Hi> {

    const x: VertexShader<C>::E = VertexShader<C>::E();

    module VertexShader<C> {
        extend Frog;

        module Types {
            struct VertexOutput {
                @builtin(position)
                Position: vec4f,
                @location(0)
                fragColor: A::T
            }

            struct Uniforms {
                modelMatrix: C::T
            }

            alias Nested = E;
        }

        alias E = C::T;

        module Frog {
            const y: C::T = 0f;
        }

        @binding(0) @group(0)
        var<uniform> uniforms: VertexShader<C>::Types::Uniforms;

        @binding(1) @group(0)
        var<uniform> camera: Types::Nested;

        @vertex
        fn main(@builtin(instance_index) instanceIdx: u32, @location(0) position: vec4<f32>, @location(1) color: vec4f) -> Types::VertexOutput {
            let uni = Types::Nested();
            var output: Types::VertexOutput;
            output.Position = camera.viewProjectionMatrix * uniforms.modelMatrix.viewProjectionMatrix[instanceIdx] * position;
            output.fragColor = color / vec4<f32>(x);
            return output;
        }
    }
}
