

module My_Lib {
    const x: My_Lib::VertexShader::Types::Camera = My_Lib::VertexShader::Types::Camera();

    module VertexShader {
        module Types {
            struct VertexOutput {
                @builtin(position)
                Position: vec4f,
                @location(0)
                fragColor: vec4f
            }

            struct Uniforms {
                modelMatrix: array<mat4x4f, 5>
            }

            struct Camera {
                viewProjectionMatrix: mat4x4f
            }
        }

        module Frog {
            const y: f32 = 0f;
        }

        @binding(0) @group(0)
        var<uniform> uniforms: My_Lib::VertexShader::Types::Uniforms;

        @binding(1) @group(0)
        var<uniform> camera: My_Lib::VertexShader::Types::Camera;

        @vertex
        fn main(@builtin(instance_index) instanceIdx: u32, @location(0) position: vec4f, @location(1) color: vec4f) -> My_Lib::VertexShader::Types::VertexOutput {
            import My_Lib::VertexShader::Types::{ My_Lib::VertexShader::Types::U }

            import My_Lib::x as y;
            let uni = My_Lib::VertexShader::Types::Uniforms();
            var output: My_Lib::VertexShader::Types::VertexOutput;
            output.Position = My_Lib::VertexShader::camera.viewProjectionMatrix * My_Lib::VertexShader::uniforms.modelMatrix[instanceIdx] * position;
            output.fragColor = color / vec4<f32>(My_Lib::x);
            return output;
        }
    }
}
