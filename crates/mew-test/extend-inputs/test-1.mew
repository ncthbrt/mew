extend My_Lib::VertexShader;

module My_Lib {
    import VertexShader::Types::Camera;
    const x: VertexShader::Types::Camera = Camera();

    module VertexShader {
        extend Frog;

        module Types {
            struct VertexOutput {
                @builtin(position) Position : vec4f,
                @location(0) fragColor : vec4f,
            }
            struct Uniforms {
                modelMatrix : array<mat4x4f, 5>,
            }
            struct Camera {
                viewProjectionMatrix : mat4x4f,
            }
        }

        module Frog {
            const y: f32 = 0f;
        }

        @binding(0) @group(0) var<uniform> uniforms : Types::Uniforms;
        @binding(1) @group(0) var<uniform> camera : Types::Camera;

        @vertex
        fn main(
        @builtin(instance_index) instanceIdx : u32,
        @location(0) position : vec4f,
        @location(1) color : vec4f
        ) -> Types::VertexOutput {
            import Types::{Uniforms}
            import My_Lib::x as z;
            let uni = Uniforms();
            var output : Types::VertexOutput;
            output.Position = camera.viewProjectionMatrix * uniforms.modelMatrix[instanceIdx] * position;
            output.fragColor = color / vec4<f32>(z * y);
            return output;
        }
    }
}
