

@compute @workgroup_size(workgroup_threads, 1, 1)
fn test__4_ReduceBuffer_main__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(@builtin(global_invocation_id) grid: vec3<u32>, @builtin(local_invocation_index) localIndex: u32, @builtin(num_workgroups) numWorkgroups: vec3<u32>, @builtin(workgroup_id) workgroupId: vec3<u32>) {
    test__4_ReduceBuffer_reduceBufferToWork__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(grid.xy, localIndex);
    let outDex = workgroupId.x + test__4_ReduceBuffer_u__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads.resultOffset;
    test__4_ReduceWorkgroup_reduceWorkgroup__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(localIndex);
    if localIndex == 0u {
        test__4_ReduceBuffer_out__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads[outDex] = test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size[0];
    }
}

@group(0) @binding(2)
var<storage, read_write> test__4_ReduceBuffer_out__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads: array<test__4_Sum__test____95____4____58____58____F32>;

@group(0) @binding(0)
var<uniform> test__4_ReduceBuffer_u__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads: test__4_ReduceBuffer_Uniforms;

struct test__4_ReduceBuffer_Uniforms {
    sourceOffset: u32,
    resultOffset: u32
}

fn test__4_ReduceBuffer_reduceBufferToWork__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(grid: vec2<u32>, localId: u32) {
    var values = test__4_ReduceBuffer_fetchSrcBuffer__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(grid.x);
    var v = test__4_ReduceBuffer_reduceSrcBlock__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(values);
    test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size[localId] = v;
}

fn test__4_ReduceBuffer_reduceSrcBlock__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(a: array<test__4_Sum__test____95____4____58____58____F32, test__4_test____4__ReduceBuffer__block____area>) -> test__4_Sum__test____95____4____58____58____F32 {
    var v = a[0];
    for (var i = 1u; i < test__4_test____4__ReduceBuffer__block____area; i = i + 1u) {
        v = test__4_SumBinaryOp_binaryOp__test____95____4____58____58____F32(v, a[i]);
    }
    return v;
}

fn test__4_ReduceBuffer_fetchSrcBuffer__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(gridX: u32) -> array<test__4_Sum__test____95____4____58____58____F32, test__4_test____4__ReduceBuffer__block____area> {
    let start = test__4_ReduceBuffer_u__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads.sourceOffset + (gridX * test__4_test____4__ReduceBuffer__block____area);
    let end = arrayLength(&test__4_ReduceBuffer_src__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads);
    var a = array<test__4_Sum__test____95____4____58____58____F32, test__4_test____4__ReduceBuffer__block____area>();
    for (var i = 0u; i < test__4_test____4__ReduceBuffer__block____area; i = i + 1u) {
        var idx = i + start;
        if idx < end {
            a[i] = test__4_SumBinaryOp_loadOp__test____95____4____58____58____F32(test__4_ReduceBuffer_src__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads[idx]);
        }
        else {
            a[i] = test__4_SumBinaryOp_identityOp__test____95____4____58____58____F32();
        }
    }
    return a;
}

@group(0) @binding(1)
var<storage, read> test__4_ReduceBuffer_src__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____block____95____95____area__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads: array<test__4_Sum__test____95____4____58____58____F32>;

var<workgroup> test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size: array<test__4_Sum__test____95____4____58____58____F32, test__4_test____4__ReduceBuffer__work____size>;

fn test__4_ReduceWorkgroup_reduceWorkgroup__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____threads(localId: u32) {
    let workDex = localId << 1u;
    for (var step = 1u; step < test__4_test____4__ReduceBuffer__threads; step <<= 1u) {
        workgroupBarrier();
        if localId % step == 0u {
            test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size[workDex] = test__4_SumBinaryOp_binaryOp__test____95____4____58____58____F32(test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size[workDex], test__4_ReduceWorkgroup_work__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____Op__test____95____4____58____58____test____95____95____4____95____ReduceBuffer____95____work____95____95____size[workDex + step]);
        }
    }
}

fn test__4_SumBinaryOp_binaryOp__test____95____4____58____58____F32(a: test__4_Sum__test____95____4____58____58____F32, b: test__4_Sum__test____95____4____58____58____F32) -> test__4_Sum__test____95____4____58____58____F32 {
    return test__4_Sum__test____95____4____58____58____F32(test__4_Intrinsic_add__f32(a.sum, b.sum));
}

fn test__4_SumBinaryOp_identityOp__test____95____4____58____58____F32() -> test__4_Sum__test____95____4____58____58____F32 {
    return test__4_Sum__test____95____4____58____58____F32();
}

fn test__4_SumBinaryOp_loadOp__test____95____4____58____58____F32(a: test__4_Sum__test____95____4____58____58____F32) -> test__4_Sum__test____95____4____58____58____F32 {
    return test__4_Sum__test____95____4____58____58____F32(a.sum);
}

struct test__4_Sum__test____95____4____58____58____F32 {
    sum: f32
}

fn test__4_Intrinsic_add__f32(a: f32, b: f32) -> f32 {
    return a + b;
}

const test__4_test____4__ReduceBuffer__threads: u32 = 10u;

const test__4_test____4__ReduceBuffer__work____size: u32 = 18u;

const test__4_test____4__ReduceBuffer__block____area: u32 = 4u;
