use std::str::FromStr;
use crate::{span::{Span, Spanned, S}, error::ParseError, lexer::Token};
use crate::syntax_spanned::*;
use crate::parser_support_spanned::*;

// this grammar follows closely the wgsl spec.
// follwing the spec at this date: https://www.w3.org/TR/2024/WD-WGSL-20240731/

grammar;

extern {
    type Location = usize;
    type Error = (usize, ParseError, usize);
    enum Token {
        // syntactic tokens
        // https://www.w3.org/TR/WGSL/#syntactic-tokens
        "&" => Token::SymAnd,
        "&&" => Token::SymAndAnd,
        "->" => Token::SymArrow,
        "@" => Token::SymAttr,
        "/" => Token::SymForwardSlash,
        "!" => Token::SymBang,
        "[" => Token::SymBracketLeft,
        "]" => Token::SymBracketRight,
        "{" => Token::SymBraceLeft,
        "}" => Token::SymBraceRight,
        ":" => Token::SymColon,
        "," => Token::SymComma,
        "=" => Token::SymEqual,
        "==" => Token::SymEqualEqual,
        "!=" => Token::SymNotEqual,
        ">" => Token::SymGreaterThan,
        ">=" => Token::SymGreaterThanEqual,
        ">>" => Token::SymShiftRight,
        "<" => Token::SymLessThan,
        "<=" => Token::SymLessThanEqual,
        "<<" => Token::SymShiftLeft,
        "%" => Token::SymModulo,
        "-" => Token::SymMinus,
        "--" => Token::SymMinusMinus,
        "." => Token::SymPeriod,
        "+" => Token::SymPlus,
        "++" => Token::SymPlusPlus,
        "|" => Token::SymOr,
        "||" => Token::SymOrOr,
        "(" => Token::SymParenLeft,
        ")" => Token::SymParenRight,
        ";" => Token::SymSemicolon,
        "*" => Token::SymStar,
        "~" => Token::SymTilde,
        "_" => Token::SymUnderscore,
        "^" => Token::SymXor,
        "+=" => Token::SymPlusEqual,
        "-=" => Token::SymMinusEqual,
        "*=" => Token::SymTimesEqual,
        "/=" => Token::SymDivisionEqual,
        "%=" => Token::SymModuloEqual,
        "&=" => Token::SymAndEqual,
        "|=" => Token::SymOrEqual,
        "^=" => Token::SymXorEqual,
        ">>=" => Token::SymShiftRightAssign,
        "<<=" => Token::SymShiftLeftAssign,

        // keywords
        // https://www.w3.org/TR/WGSL/#keyword-summary
        "alias" => Token::KwAlias,
        "break" => Token::KwBreak,
        "case" => Token::KwCase,
        "const" => Token::KwConst,
        "const_assert" => Token::KwConstAssert,
        "continue" => Token::KwContinue,
        "continuing" => Token::KwContinuing,
        "default" => Token::KwDefault,
        "diagnostic" => Token::KwDiagnostic,
        "discard" => Token::KwDiscard,
        "else" => Token::KwElse,
        "enable" => Token::KwEnable,
        "false" => Token::KwFalse,
        "fn" => Token::KwFn,
        "for" => Token::KwFor,
        "if" => Token::KwIf,
        "let" => Token::KwLet,
        "loop" => Token::KwLoop,
        "override" => Token::KwOverride,
        "requires" => Token::KwRequires,
        "return" => Token::KwReturn,
        "struct" => Token::KwStruct,
        "switch" => Token::KwSwitch,
        "true" => Token::KwTrue,
        "var" => Token::KwVar,
        "while" => Token::KwWhile,
        // BEGIN WESL ADDITIONS
        "load" => Token::KwLoad,
        "mod" => Token::KwMod,        
        "include" => Token::KwInclude,
        "sig" => Token::KwSig,
        // END WESL ADDITIONS
        IdentPatternToken => Token::Ident(<String>),
        TokAbstractInt => Token::AbstractInt(<i64>),
        TokAbstractFloat => Token::AbstractFloat(<f64>),
        TokI32 => Token::I32(<i32>),
        TokU32 => Token::U32(<u32>),
        TokF32 => Token::F32(<f32>),
        TokF16 => Token::F16(<f32>),
        TokTemplateArgsStart => Token::TemplateArgsStart,
        TokTemplateArgsEnd => Token::TemplateArgsEnd,
    }
}

// the grammar rules are layed out in the same order as in the spec.
// follwing the spec at this date: https://www.w3.org/TR/2024/WD-WGSL-20240731/

// custom entrypoint called by the lexer when it sees [Token::Ident, Token::SymLessThan].
// if this parse succeeds, the next token emitted by the lexer will be TokTemplateList.
// pub TryTemplateList: Span = {
//    <l:@L> TokTemplateArgsStart TemplateArgCommaList TokTemplateArgsEnd <r:@R> => { (l..r) },
//};

// =====================
// === Begin grammar ===
// =====================

// 2. WGSL MODULE
// https://www.w3.org/TR/WGSL/#wgsl-module

pub TranslationUnit: TranslationUnit = {
    <global_directives: S<GlobalDirective>*> <global_declarations: S<GlobalDecl>*> => TranslationUnit {<>},
};

GlobalDecl: GlobalDeclaration = {
    ";"                        => GlobalDeclaration::Void,
    <GlobalVariableDecl> ";"   => GlobalDeclaration::Declaration(<>),
    <GlobalValueDecl> ";"      => GlobalDeclaration::Declaration(<>),
    <AliasDecl> ";"        => GlobalDeclaration::Alias(<>),
    <StructDecl>               => GlobalDeclaration::Struct(<>),
    <FunctionDecl>             => GlobalDeclaration::Function(<>),
    <ConstAssertStatement> ";" => GlobalDeclaration::ConstAssert(<>),
};

DiagnosticRuleName: Span = {
    DiagnosticNameToken,
    <first: DiagnosticNameToken> "." <last: DiagnosticNameToken> => first.start..last.end,
};

// 3. TEXTUAL STRUCTURE
// https://www.w3.org/TR/WGSL/textual-structure#

// XXX: non-conformant
// https://www.w3.org/TR/WGSL/#syntax-literal
Literal: LiteralExpression = {
    TokAbstractInt   => LiteralExpression::AbstractInt(<>),
    TokAbstractFloat => LiteralExpression::AbstractFloat(<>),
    TokI32           => LiteralExpression::I32(<>),
    TokU32           => LiteralExpression::U32(<>),
    TokF32           => LiteralExpression::F32(<>),
    TokF16           => LiteralExpression::F16(<>),
    BoolLiteral,
};

BoolLiteral: LiteralExpression = {
    "true"  => LiteralExpression::True,
    "false" => LiteralExpression::False,
};

Ident: Span = {
    <l: @L> IdentPatternToken <r: @R> /* _DisambiguateTemplate */ => l..r,
};

MemberIdent: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

// TODO: check context-dependent names below.

BuiltinValueName: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

DiagnosticNameToken: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

SeverityControlName: DiagnosticSeverity = {
    <l: @L> <ident: IdentPatternToken> <r: @R> =>? {
        DiagnosticSeverity::from_str(&ident).map_err(|e| lalrpop_util::ParseError::User{ error: (l, e, r) })
    },
};

EnableExtensionName: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

SoftwareExtensionName: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

InterpolateSamplingName: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

SwizzleName: Span = {
    <l: @L> IdentPatternToken <r: @R> => l..r,
};

TemplateList: Vec<S<TemplateArg>> = {
    TokTemplateArgsStart <TemplateArgCommaList> TokTemplateArgsEnd,
};

TemplateArgCommaList: Vec<S<TemplateArg>> = {
    Comma1<S<TemplateArgExpression>>,
};

TemplateArgExpression: Expression = {
    Expression,
};

// 4. DIRECTIVES
// https://www.w3.org/TR/WGSL/#directives

GlobalDirective: GlobalDirective = {
    DiagnosticDirective => GlobalDirective::Diagnostic(<>),
    EnableDirective     => GlobalDirective::Enable(<>),
    RequiresDirective   => GlobalDirective::Requires(<>),
};

EnableDirective: EnableDirective = {
    "enable" <extensions: EnableExtensionList> ";" => EnableDirective {
        extensions
    },
};

EnableExtensionList: Vec<Span> = {
    Comma1<EnableExtensionName>,
};

RequiresDirective: RequiresDirective = {
    "requires" <extensions: SoftwareExtensionList> ";" => RequiresDirective {
        extensions
    },
};

SoftwareExtensionList: Vec<Span> = {
    Comma1<SoftwareExtensionName>,
};

DiagnosticDirective: DiagnosticDirective = {
    "diagnostic" <DiagnosticControl> ";" => {
        let (severity, rule_name) = <>;
        DiagnosticDirective { severity, rule_name }
    },
};

// 5. DECLARATION AND SCOPE
// https://www.w3.org/TR/WGSL/#declaration-and-scope

// 6. TYPES
// https://www.w3.org/TR/WGSL/#types

StructDecl: Struct = {
    "struct" <name: Ident> <members: StructBodyDecl> => Struct {
        name, members
    },
};

StructBodyDecl: Vec<S<StructMember>> = {
    "{" <Comma1<S<StructMember>>> "}",
};

StructMember: StructMember = {
    <attributes: S<Attribute>*> <name: MemberIdent> ":" <typ: TypeSpecifier> => StructMember {
        attributes, name, typ
    },
};

AliasDecl: Alias = {
    "alias" <name: Ident> "=" <typ: TypeSpecifier> => Alias {
        name, typ
    },
};

TypeSpecifier: TypeExpression = {
    TemplateElaboratedIdent => {
        let (name, template_args) = <>;
        TypeExpression { name, template_args }
    },
};

TemplateElaboratedIdent = Ident /* DisambiguateTemplate */ TemplateList?;

// 7. VARIABLE AND VALUE DECLARATIONS
// https://www.w3.org/TR/WGSL/#var-and-value

VariableOrValueStatement: Declaration = {
    VariableDecl,
    <mut decl: VariableDecl> "=" <initializer: S<Expression>> => {
        decl.initializer = Some(initializer);
        decl
    },
    "let" <ident: OptionallyTypedIdent> "=" <initializer: S<Expression>> => {
        let (name, typ) = ident;
        Declaration {
            attributes: Vec::new(),
            kind: DeclarationKind::Let,
            template_args: None,
            name,
            typ,
            initializer: Some(initializer),
        }
    },
    "const" <ident: OptionallyTypedIdent> "=" <initializer: S<Expression>> => {
        let (name, typ) = ident;
        Declaration {
            attributes: Vec::new(),
            kind: DeclarationKind::Let,
            template_args: None,
            name,
            typ,
            initializer: Some(initializer),
        }
    },
};

VariableDecl: Declaration = {
    "var" /* DisambiguateTemplate */ <template_args: TemplateList?> <ident: OptionallyTypedIdent> => {
        let (name, typ) = ident;
        Declaration {
            attributes: Vec::new(),
            kind: DeclarationKind::Var,
            template_args,
            name,
            typ,
            initializer: None,
        }
    },
};

OptionallyTypedIdent: (Span, Option<TypeExpression>) = {
    <Ident> <(":" <TypeSpecifier>)?>,
};

GlobalVariableDecl: Declaration = {
    <attributes: S<Attribute>*> <mut decl: VariableDecl> <initializer: ("=" <S<Expression>>)?> => {
        decl.attributes = attributes;
        decl.initializer = initializer.map(Into::into);
        decl
    },
};

GlobalValueDecl: Declaration = {
    "const" <ident: OptionallyTypedIdent> "=" <initializer: S<Expression>> => {
        let (name, typ) = ident;
        Declaration {
            attributes: Vec::new(),
            kind: DeclarationKind::Const,
            template_args: None,
            name,
            typ,
            initializer: Some(initializer),
        }
    },
    <attributes: S<Attribute>*> "override" <ident: OptionallyTypedIdent> <initializer: ("=" <S<Expression>>)?> => {
        let (name, typ) = ident;
        Declaration {
            attributes,
            kind: DeclarationKind::Override,
            template_args: None,
            name,
            typ,
            initializer,
        }
    },
};

// 8. EXPRESSIONS
// https://www.w3.org/TR/WGSL/#expressions

PrimaryExpression: Expression = {
    TemplateElaboratedIdent => {
        let (name, template_args) = <>;
        match template_args {
            Some(_) => Expression::Type(TypeExpression { name, template_args }),
            None => Expression::Identifier(name),
        }
    }, // XXX: not sure about this one, is it type?
    CallExpression,
    Literal => Expression::Literal(<>),
    ParenExpression,
};

CallExpression: Expression = {
    CallPhrase => Expression::FunctionCall(<>),
};

CallPhrase: FunctionCallExpression = {
    <callee: TemplateElaboratedIdent> <arguments: ArgumentExpressionList> => {
        let (name, template_args) = callee;
        FunctionCallExpression {
            name, template_args, arguments
        }
    },
};

ParenExpression: Expression = {
    "(" <Expression> ")" => Expression::Parenthesized(<>.into()),
};

ArgumentExpressionList: Vec<S<Expression>> = {
    "(" <ExpressionCommaList?> ")" => <>.unwrap_or_default(),
};

ExpressionCommaList: Vec<S<Expression>> = {
    Comma1<S<Expression>>,
};

// was modified from the spec, but should be equivalent
ComponentOrSwizzleSpecifier: Vec<Component> = {
    // "[" Expression "]" ComponentOrSwizzleSpecifier?,
    // "." MemberIdent ComponentOrSwizzleSpecifier?,
    // "." SwizzleName ComponentOrSwizzleSpecifier ?,
    SingleComponentOrSwizzleSpecifier+
};

SingleComponentOrSwizzleSpecifier: Component = {
    "[" <S<Expression>> "]" => Component::Index(<>.into()),
    "." <MemberIdent>       => Component::Named(<>),
}

UnaryExpression: Expression = {
    SingularExpression,
    "-" <operand: S<UnaryExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::Negation, operand: operand.into()
    }),
    "!" <operand: S<UnaryExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::LogicalNegation, operand: operand.into()
    }),
    "~" <operand: S<UnaryExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::BitwiseComplement, operand: operand.into()
    }),
    "*" <operand: S<UnaryExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::Indirection, operand: operand.into()
    }),
    "&" <operand: S<UnaryExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::AddressOf, operand: operand.into()
    }),
};

SingularExpression: Expression = {
    <expr: S<PrimaryExpression>> <components: ComponentOrSwizzleSpecifier?> => match components {
        Some(components) => apply_components(components, expr).into_inner(),
        None => expr.into_inner()
    },
};

LhsExpression: Expression = {
    <expr: S<CoreLhsExpression>> <components: ComponentOrSwizzleSpecifier?> => match components {
        Some(components) => apply_components(components, expr).into_inner(),
        None => expr.into_inner()
    },
    "*" <operand: S<LhsExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::Indirection, operand: operand.into()
    }),
    "&" <operand: S<LhsExpression>> => Expression::Unary(UnaryExpression {
        operator: UnaryOperator::AddressOf, operand: operand.into()
    }),
 };
 
CoreLhsExpression: Expression = {
    Ident /* DisambiguateTemplate */ => Expression::Identifier(<>),
    "(" <LhsExpression> ")" => Expression::Parenthesized(<>.into()),
};

MultiplicativeExpression: Expression = {
    UnaryExpression,
    <left: S<MultiplicativeExpression>> <operator: MultiplicativeOperator> <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator, left: left.into(), right: right.into()
    }),
};

MultiplicativeOperator: BinaryOperator = {
    "*" => BinaryOperator::Multiplication,
    "/" => BinaryOperator::Division,
    "%" => BinaryOperator::Remainder,
};
 
AdditiveExpression: Expression = {
    MultiplicativeExpression,
    <left: S<AdditiveExpression>> <operator: AdditiveOperator> <right: S<MultiplicativeExpression>> => Expression::Binary(BinaryExpression {
        operator, left: left.into(), right: right.into()
    }),
};

AdditiveOperator: BinaryOperator = {
    "+" => BinaryOperator::Addition,
    "-" => BinaryOperator::Subtraction,
};

ShiftExpression: Expression = {
    AdditiveExpression,
    <left: S<UnaryExpression>> "<<" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShiftLeft, left: left.into(), right: right.into()
    }),
    <left: S<UnaryExpression>> ">>" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShiftRight, left: left.into(), right: right.into()
    }),
};

RelationalExpression: Expression = {
    ShiftExpression,
    <left: S<ShiftExpression>> "<" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::LessThan, left: left.into(), right: right.into()
    }),
    <left: S<ShiftExpression>> ">" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::GreaterThan, left: left.into(), right: right.into()
    }),
    <left: S<ShiftExpression>> "<=" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::LessThanEqual, left: left.into(), right: right.into()
    }),
    <left: S<ShiftExpression>> ">=" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::GreaterThanEqual, left: left.into(), right: right.into()
    }),
    <left: S<ShiftExpression>> "==" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::Equality, left: left.into(), right: right.into()
    }),
    <left: S<ShiftExpression>> "!=" <right: S<ShiftExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::Inequality, left: left.into(), right: right.into()
    }),
};

ShortCircuitAndExpression: Expression = {
    RelationalExpression,
    <left: S<ShortCircuitAndExpression>> "&&" <right: S<RelationalExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShortCircuitAnd, left: left.into(), right: right.into()
    }),
 };
 
ShortCircuitOrExpression: Expression = {
    RelationalExpression,
    <left: S<ShortCircuitOrExpression>> "||" <right: S<RelationalExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShortCircuitOr, left: left.into(), right: right.into()
    }),
 };
 
BinaryOrExpression: Expression = {
    UnaryExpression,
    <left: S<BinaryOrExpression>> "|" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseOr, left: left.into(), right: right.into()
    }),
};

BinaryAndExpression: Expression = {
    UnaryExpression,
    <left: S<BinaryAndExpression>> "&" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseAnd, left: left.into(), right: right.into()
    }),
};

BinaryXorExpression: Expression = {
    UnaryExpression,
    <left: S<BinaryXorExpression>> "^" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseXor, left: left.into(), right: right.into()
    }),
};

BitwiseExpression: Expression = {
    <left: S<BinaryAndExpression>> "&" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseAnd, left: left.into(), right: right.into()
    }),
    <left: S<BinaryOrExpression>> "|" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseOr, left: left.into(), right: right.into()
    }),
    <left: S<BinaryXorExpression>> "^" <right: S<UnaryExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::BitwiseXor, left: left.into(), right: right.into()
    }),
};

Expression: Expression = {
    RelationalExpression,
    <left: S<ShortCircuitOrExpression>> "||" <right: S<RelationalExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShortCircuitOr, left: left.into(), right: right.into()
    }),
    <left: S<ShortCircuitAndExpression>> "&&" <right: S<RelationalExpression>> => Expression::Binary(BinaryExpression {
        operator: BinaryOperator::ShortCircuitAnd, left: left.into(), right: right.into()
    }),
    BitwiseExpression,
};

// 9. STATEMENTS
// https://www.w3.org/TR/WGSL/#statements


CompoundStatement: CompoundStatement = {
    <attributes: S<Attribute>*> "{" <statements: S<Statement>*> "}" => CompoundStatement {
        attributes, statements
    },
};

AssignmentStatement: AssignmentStatement = {
    <lhs: S<LhsExpression>> "=" <rhs: S<Expression>> => AssignmentStatement {
        operator: AssignmentOperator::Equal, lhs, rhs
    },
    <lhs: S<LhsExpression>> <operator: CompoundAssignmentOperator> <rhs: S<Expression>> => AssignmentStatement {
        operator, lhs, rhs
    },
    <l: @L> "_" <r: @R> "=" <rhs: S<Expression>> => {
        let lhs = Spanned::new(Expression::Identifier(l..r), l..r);
        AssignmentStatement { operator: AssignmentOperator::Equal, lhs, rhs }
    },
};

CompoundAssignmentOperator: AssignmentOperator = {
    "+=" => AssignmentOperator::PlusEqual,
    "-=" => AssignmentOperator::MinusEqual,
    "*=" => AssignmentOperator::TimesEqual,
    "/=" => AssignmentOperator::DivisionEqual,
    "%=" => AssignmentOperator::ModuloEqual,
    "&=" => AssignmentOperator::AndEqual,
    "|=" => AssignmentOperator::OrEqual,
    "^=" => AssignmentOperator::XorEqual,
    ">>=" => AssignmentOperator::ShiftRightAssign,
    "<<=" => AssignmentOperator::ShiftLeftAssign,
};

IncrementStatement: S<Expression> = {
    <S<LhsExpression>> "++",
};

DecrementStatement: S<Expression> = {
    <S<LhsExpression>> "--",
};

IfStatement: IfStatement = {
    <attributes: S<Attribute>*> <if_clause: IfClause> <else_if_clauses: ElseIfClause*> <else_clause: ElseClause?> => IfStatement {
        attributes, if_clause, else_if_clauses, else_clause
    },
};

IfClause = "if" <S<Expression>> <CompoundStatement>;

ElseIfClause = "else" "if" <S<Expression>> <CompoundStatement>;

ElseClause = "else" <CompoundStatement>;

SwitchStatement: SwitchStatement = {
    <attributes: S<Attribute>*> "switch" <expression: S<Expression>> <body: SwitchBody> => {
        let (body_attributes, clauses) = body;
        SwitchStatement {
            attributes, expression, body_attributes, clauses
        }
    },
};

SwitchBody: (Vec<S<Attribute>>, Vec<SwitchClause>) = {
    <S<Attribute>*> "{" <SwitchClause+> "}",
};

SwitchClause: SwitchClause = {
    CaseClause,
    DefaultAloneClause,
};

CaseClause: SwitchClause = {
    "case" <case_selectors: CaseSelectors> ":"? <body: CompoundStatement> => SwitchClause {
        case_selectors, body
    },
};

DefaultAloneClause: SwitchClause = {
    "default" ":"? <body: CompoundStatement> => SwitchClause {
        case_selectors: vec![CaseSelector::Default], body
    },
};

CaseSelectors: Vec<CaseSelector> = {
    Comma1<CaseSelector>,
};

CaseSelector: CaseSelector = {
    "default" => CaseSelector::Default,
    S<Expression> => CaseSelector::Expression(<>),
};

LoopStatement: LoopStatement = {
    <attributes: S<Attribute>*> "loop" <body_attributes: S<Attribute>*> "{" <statements: S<Statement>*> <continuing: S<ContinuingStatement>?> "}" => {
        let body = CompoundStatement { attributes: body_attributes, statements };
        LoopStatement {
            attributes, body, continuing
        }
    },
};

ForStatement: ForStatement = {
     <attributes: S<Attribute>*> "for" "(" <header: ForHeader> ")" <body: CompoundStatement> => {
        let (initializer, condition, update) = header;
        ForStatement {
            attributes, initializer: initializer.map(Into::into), condition, update: update.map(Into::into), body
        }
    },
};

ForHeader: (Option<S<Statement>>, Option<S<Expression>>, Option<S<Statement>>) = {
    <S<ForInit>?> ";" <S<Expression>?> ";" <S<ForUpdate>?>,
};

ForInit: Statement = {
    VariableOrValueStatement  => Statement::Declaration(<>),
    VariableUpdatingStatement => <>,
    FuncCallStatement         => Statement::FunctionCall(<>),
};

ForUpdate: Statement = {
    VariableUpdatingStatement => <>,
    FuncCallStatement         => Statement::FunctionCall(<>),
};

WhileStatement: WhileStatement = {
    <attributes: S<Attribute>*> "while" <condition: S<Expression>> <body: CompoundStatement> => WhileStatement {
        attributes, condition, body
    },
};

BreakStatement: () = {
    "break",
};

BreakIfStatement: S<Expression> = {
    "break" "if" <S<Expression>> ";",
};

ContinueStatement: () = {
    "continue",
};

ContinuingStatement = "continuing" <ContinuingCompoundStatement>;

ContinuingCompoundStatement: ContinuingStatement = {
    <attributes: S<Attribute>*> "{" <statements: S<Statement>*> <break_if: BreakIfStatement?> "}" => {
        let body = CompoundStatement { attributes, statements };
        ContinuingStatement { body, break_if }
    },
};

ReturnStatement: Option<S<Expression>> = {
    "return" <S<Expression>?>,
};

FuncCallStatement = CallPhrase;

ConstAssertStatement: ConstAssert = {
    "const_assert" <S<Expression>> => ConstAssert { expression: <> },
};

Statement: Statement = {
    ";" => Statement::Void,
    <ReturnStatement> ";" => Statement::Return(<>),
    <IfStatement> => Statement::If(<>),
    <SwitchStatement> => Statement::Switch(<>),
    <LoopStatement> => Statement::Loop(<>),
    <ForStatement> => Statement::For(<>),
    <WhileStatement> => Statement::While(<>),
    <FuncCallStatement> ";" => Statement::FunctionCall(<>),
    <VariableOrValueStatement> ";" => Statement::Declaration(<>),
    BreakStatement ";" => Statement::Break,
    ContinueStatement ";" => Statement::Continue,
    "discard" ";" => Statement::Discard,
    <VariableUpdatingStatement> ";" => <>,
    <CompoundStatement> => Statement::Compound(<>),
    <ConstAssertStatement> ";" => Statement::ConstAssert(<>),
};

VariableUpdatingStatement: Statement = {
    AssignmentStatement => Statement::Assignment(<>),
    IncrementStatement => Statement::Increment(<>),
    DecrementStatement => Statement::Decrement(<>),
};

// 10. FUNCTIONS
// https://www.w3.org/TR/WGSL/#functions

FunctionDecl: Function = {
    <attributes: S<Attribute>*> <header: FunctionHeader> <body: CompoundStatement> => {
        let (name, parameters, return_attributes, return_type) = header;
        Function { attributes, name, parameters, return_attributes, return_type, body }
    },
};

FunctionHeader: (Span, Vec<S<FormalParameter>>, Vec<S<Attribute>>, Option<TypeExpression>) = {
    "fn" <name: Ident> "(" <parameters: ParamList?> ")" <ret: ("->" <S<Attribute>*> <TemplateElaboratedIdent>)?> => {
        let (return_attributes, return_type) = ret.map(|(return_attributes, (name, template_args))| {
            let return_type = TypeExpression {name, template_args };
            (return_attributes, Some(return_type))
        }).unwrap_or_default();
        let parameters = parameters.unwrap_or_default();
        (name, parameters, return_attributes, return_type)
    },
};

ParamList: Vec<S<FormalParameter>> = {
    Comma1<S<Param>>,
};

Param: FormalParameter = {
    <attributes: S<Attribute>*> <name: Ident> ":" <typ: TypeSpecifier> => FormalParameter {
        attributes, name, typ
    },
};

// 11. ATTRIBUTES
// https://www.w3.org/TR/WGSL/#attributes

// TODO: maybe parse the well-known attributes.
Attribute: Attribute = {
    "@" <l: @L> IdentPatternToken <r: @R> <arguments: ArgumentExpressionList?> => Attribute {
        name: l..r, arguments
    }
};

DiagnosticControl: (DiagnosticSeverity, Span) = {
    "(" <SeverityControlName> "," <DiagnosticRuleName> ","? ")",
};

// ===================
// === End grammar ===
// ===================

// ----------- below: macros -----------

Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T?> => match e {
        Some(e) => {
            v.push(e);
            v
        }
        None => v,
    }
};

Comma1<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T> ","? => {
        v.push(e);
        v
    }
};

// spanned
S<T>: Spanned<T> = <l: @L> <t: T> <r: @R> => Spanned::new(t, l..r);
